var bounds =  [[-98, 42.5], [-89, 51]];  // minnesota boundary
var regex = /\B(?=(\d{3})+(?!\d))/g // thousand separator
const limit = 1000; // threshold

// mapbox
fetch("cities.json").then(
    respone => respone.json()).then(data =>{

    const getPopulationSize = size =>{

        if (size <= 10000){
        return "grey";
    }
    else if(size <= 20000){
    return "yellow";
}
else if (size <= 50000){
    return "blue";
}
 
  else return "red";
}


    var description = "";
    
     for(i = 0; i < 50; i++){
        const{lng, lat, population, city, zips} = data[i]

        if(population >= limit){
         description = "City: "  +  city + "<br>" + "Zip code: " + getZip(zips) + "<br>" + "Population:" + population.toString().replace(regex, ","); // thousand seperator regex
        console.log(description);

        new mapboxgl.Marker({
            draggable: false,
            color: getPopulationSize(population)
            })
             
            .setLngLat([lng, lat])
            .setPopup(
                new mapboxgl.Popup({
                    closeButton: false,
                    offset: 25                
                })
                .setHTML(description)
            
            )
             .addTo(map);
     }

    }
    
               
     
    })
   
    mapboxgl.accessToken = ACCESS_TOKEN.key
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [-94.636230, 46.392410],
            maxBounds: bounds,
            zoom : 5
        
            
        });
	 
    
	map.addControl(new mapboxgl.NavigationControl());
 
 

    // draw minnesota boundary shape and fill it with color
    map.on('load', function () {
        // Add a data source containing GeoJSON data.
        map.addSource('minnesota', {
        'type': 'geojson',
        'data': {
        'type': 'Feature',
        'geometry': {
        'type': 'Polygon',
        // These coordinates outline Minnesota.
        'coordinates': [[[-89.59940914585667,48.01027395282483],[-89.48888455722101,48.01343887860651],[-89.52269548211933,47.96053538674391],[-89.61369767938538,47.81925202085796],[-89.72800594761503,47.641976019880644],[-89.84283098016755,47.464725857119504],[-89.95765601272012,47.28690725360326],[-90.13175391311142,47.29274669045219],[-90.30585181350267,47.29801768654602],[-90.47994971389409,47.30385712339489],[-90.65404761428533,47.30912811948872],[-90.85778194859608,47.21282908791278],[-91.06097368036774,47.11704682065988],[-91.26470801467849,47.02126455340681],[-91.46844234898913,46.92496552183104],[-91.59225908076053,46.876260484395914],[-91.71661841507085,46.827607123393136],[-91.8409777493813,46.778385321635085],[-91.96479448115258,46.72970612241613],[-92.01189754918664,46.71172272397854],[-92.27487891311995,46.65614472104869],[-92.26482784703921,46.095222886736394],[-92.29658301468254,46.09628225359836],[-92.5436997139023,45.98569468849382],[-92.7569683499708,45.88991242124092],[-92.89982784704182,45.705763454768714],[-92.68922054723623,45.518436387710665],[-92.76541744665064,45.26708222104298],[-92.76647681351261,44.9961426865367],[-92.79665584997099,44.776026923189534],[-92.50507158076414,44.58391978614452],[-92.38549231644072,44.574928086925695],[-92.06215287959043,44.432585354177775],[-91.949989183301,44.36483755144309],[-91.87960588251946,44.25742808692439],[-91.62770911331273,44.08544892025708],[-91.28959021682704,43.93729258887629],[-91.25729244664456,43.85473948829008],[-91.2546569485977,43.61397899024206],[-91.2281986152642,43.50124685319736],[-92.54000484899342,43.51977285417405],[-94.00102678096545,43.51341665300225],[-95.35993608272867,43.50018748633539],[-96.45266008175645,43.50178945573646],[-96.43943091508982,44.43576345476367],[-96.56061214881424,45.39301768653837],[-96.73576941606751,45.47081655535385],[-96.83470394569031,45.62532908790644],[-96.78072791216141,45.760798855159635],[-96.55689144568913,45.872445787126196],[-96.53945064979075,46.017966620460186],[-96.53890804725165,46.199480088885366],[-96.60135901567634,46.35135712339115],[-96.6854882474475,46.51328522397773],[-96.73365068234358,46.71647695574927],[-96.7458204821483,46.9445250514533],[-96.77969438351562,46.99904368752135],[-96.82041541216165,47.29220408791309],[-96.82465287960952,47.42661448830438],[-96.84423824744817,47.546193752627744],[-96.8939768135291,47.748868720076416],[-97.01515804725352,47.95420502378812],[-97.131042446668,48.137294623398304],[-97.14850908078273,48.31878225360731],[-97.1612214831265,48.51458425556132],[-97.12734758175912,48.64212169045754],[-97.12047461626435,48.75852285419501],[-97.21413814979343,48.90244171812793],[-97.22894344764501,49.000885321643864],[-95.15883724646483,48.9998259547819],[-95.15620174841791,49.38401439065592],[-94.81754024939323,49.38928538674975],[-94.64026424841592,48.84001658791925],[-94.32912044958647,48.670672919298795],[-93.63061011429733,48.60928131773602],[-92.60984554723586,48.45001455341253],[-91.63987891311746,48.13993012144516],[-90.83026424840062,48.27010305438836],[-89.59995174839577,48.01027395282483],[-89.59940914585667,48.01027395282483]]]}}});
        map.addLayer({
            'id': 'minnesota',
            'type': 'fill',
            'source': 'minnesota', // reference the data source
            'layout': {},
            'paint': {
            'fill-color': '#0080ff', // blue color fill
            'fill-opacity': 0.5
            }
            });
            // Add a black outline around the polygon.
            map.addLayer({
            'id': 'outline',
            'type': 'line',
            'source': 'minnesota',
            'layout': {},
            'paint': {
            'line-color': '#000',
            'line-width': 3
            }
            });
            });
 
         
map.getCanvas().style.cursor = 'default';


// if multiple zips exist (is string if multiple exists) then just return first zip (first 5 characters)
 function getZip(num){
      if(typeof(num) === 'number'){
        console.log("Is number")
        return num; // one zip
     }
     else {
     console.log("Is string")
     return num.substring(0, 5) + " (+)"; // multiple zips

     }
 }